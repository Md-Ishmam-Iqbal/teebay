// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  address      String
  phone_number String
  first_name   String?
  last_name    String?
  password     String
  products     Product[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  purchase_price Float
  rent_price     Float
  rent_duration  String
  ownerId        Int
  owner          User       @relation(fields: [ownerId], references: [id])
  categories     Category[]
}

// model RentProduct {
//   id              Int           @id @default(autoincrement())
//   productId       Int
//   product         Product       @relation(fields: [productId], references: [id])
//   lenderId        Int
//   lender          User          @relation("RentProductLender", fields: [lenderId], references: [id])
//   renterId        Int?
//   renter          User?         @relation("RentProductRenter", fields: [renterId], references: [id])
//   price           Float
//   duration        String
//   status          ProductStatus @relation(fields: [productStatusId], references: [id])
//   productStatusId Int
//   User            User?         @relation(fields: [userId], references: [id])
//   userId          Int?
// }

// model BuyProduct {
//   id              Int           @id @default(autoincrement())
//   productId       Int
//   product         Product       @relation(fields: [productId], references: [id])
//   sellerId        Int
//   seller          User          @relation("BuyProductSeller", fields: [sellerId], references: [id])
//   buyerId         Int?
//   buyer           User?         @relation("BuyProductBuyer", fields: [buyerId], references: [id])
//   price           Float
//   status          ProductStatus @relation(fields: [productStatusId], references: [id])
//   productStatusId Int
//   User            User?         @relation(fields: [userId], references: [id])
//   userId          Int?
// }

// model ProductStatus {
//   id          Int           @id @default(autoincrement())
//   productId   Int
//   product     Product       @relation(fields: [productId], references: [id])
//   isRented    Boolean       @default(false)
//   isSold      Boolean       @default(false)
//   RentProduct RentProduct[]
//   BuyProduct  BuyProduct[]
// }
